" Silvarc IdeaVim config
" initially based on https://github.com/JaimeArboleda/jet_brains_settings/blob/main/.ideavimrc

" set hlsearch
set incsearch
set gdefault
set ignorecase
set smartcase

set relativenumber
set shell=powershell.exe
set showcmd
set showmode
set number
set clipboard+=unnamed
set clipboard+=ideaput
set idearefactormode=keep
set visualbell
set noerrorbells
set noideadelaymacro
set notimeout
set ideajoin
set ideamarks
set scrolloff=8
set sidescrolloff=12
set undolevels=10000
set ideastatusicon=gray
sethandler a:vim
let mapleader=" "

" These do not seem to work in Rider
set ideavimsupport+=dialog
set ideavimsupport+=singleline

""" Plugins
set which-key
let g:WhichKey_Divider = " â†’ "
let g:WhichKey_FontFamily = "JetBrains Mono"
let g:WhichKey_FontSize = 16
let g:WhichKey_KeyStyle = "bold"
let g:WhichKey_KeyColor = "default"
let g:WhichKey_PrefixStyle = "none"
let g:WhichKey_PrefixColor = "#f5e893"
let g:WhichKey_CommandStyle = "none"
let g:WhichKey_CommandColor = "#bca0dc"

let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_SortCaseSensitive = "false"
let g:WhichKey_ProcessUnknownMappings = "false"
let g:WhichKey_DefaultDelay = 200
let g:WhichKey_ShowTypedSequence = "false"

let g:WhichKeyDesc_leader = "<leader> Actions"

set NERDTree
set textobj-indent
set highlightedyank
set argtextobj
set vim-paragraph-motion
set textobj-entire

set exchange
let g:WhichKeyDesc_cx = "cx"
let g:WhichKeyDesc_cxc = "cxc Exchange clear"
let g:WhichKeyDesc_cxx = "cxx Exchange line"

set ReplaceWithRegister
let g:WhichKeyDesc_replace = "gr"

set commentary
let g:WhichKeyDesc_gc = "gc Comment"
let g:WhichKeyDesc_gcc = "gcc Comment line"
let g:WhichKeyDesc_gcu = "gcu Uncomment"

set surround
let g:WhichKeyDesc_surround_ys = "ys"
let g:WhichKeyDesc_surround_ds = "ds"
let g:WhichKeyDesc_surround_cs = "cs"

set multiple-cursors
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
omap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
omap g<C-n> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence
nmap <S-C-n> <Plug>AllWholeOccurrences
xmap <S-C-n> <Plug>AllWholeOccurrences
omap <S-C-n> <Plug>AllWholeOccurrences
nmap g<S-C-n> <Plug>AllOccurrences
xmap g<S-C-n> <Plug>AllOccurrences
omap g<S-C-n> <Plug>AllOccurrences

set easymotion
unmap <leader><leader>
map s <Plug>(easymotion-bd-f2)

""" Maps
" Create newlines and stay in normal mode
nmap <silent> zj o<Esc>k
let g:WhichKeyDesc_zj = "zj"
nmap <silent> zk O<Esc>j
let g:WhichKeyDesc_zk = "zk"

" Insert mode
imap <c-k> <up>
imap <c-j> <down>
imap <c-h> <left>
imap <c-l> <right>
imap jk <Esc>
let g:WhichKeyDesc_jk = "jk"

" Maintain visual selection after indenting
vmap < <gv
vmap > >gv

" Do not overwrite unnamed register with x
nnoremap x "_x

" U to redo
nmap U <C-r>

" Copilot
imap <c-p> <Action>(copilot.applyInlays)
nmap <c-p> <Action>(copilot.applyInlays)
vmap <c-p> <Action>(copilot.applyInlays)
"imap <c-[> <Action>(copilot.cycleNextInlays)
"nmap <c-[> <Action>(copilot.cycleNextInlays)
"vmap <c-[> <Action>(copilot.cycleNextInlays)
"imap <c-]> <Action>(copilot.cyclePrevInlays)
"nmap <c-]> <Action>(copilot.cyclePrevInlays)
"vmap <c-]> <Action>(copilot.cyclePrevInlays)
"inoremap <c-P> <Action>(copilot.requestCompletions)
"nnoremap <c-P> <Action>(copilot.requestCompletions)
"vnoremap <c-P> <Action>(copilot.requestCompletions)

" Other
"nmap <c-z> :action ToggleDistractionFreeMode<CR>
"nmap [[ :action MethodUp<CR>
"nmap ]] :action MethodDown<CR>
"nmap <leader>c :action CommentByLineComment<CR>
"nmap <leader>l :action RecentLocations<CR>
"nmap <leader>h  :action LocalHistory.ShowHistory<CR>
"nmap <c-s> :action FileStructurePopup<CR>

" Tab navigation
"nmap <c-\> :action SplitVertically<CR>
"nmap <c--> :action SplitHorizontally<CR>
"nmap <c-=> :action Unsplit<CR>
"nmap <c-m> :action MoveEditorToOppositeTabGroup<CR>
"nmap <c-h> <c-w>h
"nmap <c-l> <c-w>l
"nmap <c-j> <c-w>j
"nmap <c-k> <c-w>k
"nmap <TAB> :action PreviousTab<CR>
"nmap <s-TAB> :action NextTab<CR>

" Window navigation
"nmap <c-p> :action JumpToLastWindow<CR>
"nmap <c-x> :action HideAllWindows<CR>
"nmap <Leader>en :action EditSourceInNewWindow<CR>
"nmap <Leader>n :action NextWindow<CR>
"nmap <Leader>q :action CloseContent<CR>
"nmap <Leader>qa :action CloseAllEditors<CR>

" Regions
"nmap zc :action CollapseRegion<CR>
"nmap zo :action ExpandRegion<CR>
"nmap <leader>zc :action CollapseAllRegions<CR>
" Most useful go to commands use g:
"nmap gt <Action>(NextTab)
"let g:WhichKeyDesc_NextTab = "gt"
"nmap gT <Action>(PreviousTab)
"let g:WhichKeyDesc_PrevTab = "gT"
"nmap gE <Action>(GotoPreviousError)
"let g:WhichKeyDesc_errp = "gE"
"nmap ge <Action>(GotoNextError)
"let g:WhichKeyDesc_errn = "ge"
"nmap gd <Action>(GotoDeclaration)
"let g:WhichKeyDesc_decl = "gd"
"nmap gD <Action>(GotoTypeDeclaration)
"let g:WhichKeyDesc_tdecla = "gD"
"nmap gb <Action>(Back)
"let g:WhichKeyDesc_tdeclaa = "gb"
"nmap gf <Action>(Forward)
"let g:WhichKeyDesc_tdeclaak = "gf"

"nmap ge :action ReSharperGotoNextErrorInSolution<CR>
"nmap gE :action ReSharperGotoPreviousErrorInSolution<CR>
"nmap gi :action GotoImplementation<CR>
"nmap gd :action GotoDeclaration<CR>
"nmap gp :action GotoSuperMethod<CR>
"nmap gy :action GotoTypeDeclaration<CR>
"nmap gb :action Back<CR>
"nmap gf :action Forward<CR>

" Action picker
let g:WhichKeyDesc_g = "<leader>g Go"
nmap <leader>gu <Action>(ShowUsages)
let g:WhichKeyDesc_gu = "<leader>gu Go to usages"
nmap <leader>gt <Action>(GotoTest)
let g:WhichKeyDesc_gt = "<leader>gt Go to test"
nmap <leader>gX <Action>(GotoPreviousError)
let g:WhichKeyDesc_gX = "<leader>gX Go to previous error"
nmap <leader>gC <Action>(VcsShowPrevChangeMarker)
let g:WhichKeyDesc_gC = "<leader>gC Go to previous VCS change"
nmap <leader>gb <Action>(Back)
let g:WhichKeyDesc_gb = "<leader>gb Go back"
nmap <leader>gf <Action>(Forward)
let g:WhichKeyDesc_gf = "<leader>gf Go forward"
nmap <leader>gE <Action>(ReSharperGotoPreviousErrorInSolution)
let g:WhichKeyDesc_gE = "<leader>gE Go to previous error in solution"
nmap <leader>gd <Action>(GotoDeclaration)
let g:WhichKeyDesc_gd = "<leader>gd Go to declaration"
nmap <leader>gj <Action>(JumpToLastChange)
let g:WhichKeyDesc_gj = "<leader>gj Go to last change"
nmap <leader>gi <Action>(GotoImplementation)
let g:WhichKeyDesc_gi = "<leader>gi Go to implementation"
nmap <leader>ge <Action>(ReSharperGotoNextErrorInSolution)
let g:WhichKeyDesc_ge = "<leader>ge Go to next error in solution"
nmap <leader>gm <Action>(MethodDown)
let g:WhichKeyDesc_gm = "<leader>gm Go to next method"
nmap <leader>gx <Action>(GotoNextError)
let g:WhichKeyDesc_gx = "<leader>gx Go to next error"
nmap <leader>gM <Action>(MethodUp)
let g:WhichKeyDesc_gM = "<leader>gM Go to previous method"
nmap <leader>gc <Action>(VcsShowNextChangeMarker)
let g:WhichKeyDesc_gc = "<leader>gc Go to next VCS change"
nmap <leader>gD <Action>(GotoTypeDeclaration)
let g:WhichKeyDesc_gD = "<leader>gD Go to type declaration"
nmap <leader>gp <Action>(GotToSuperMethod)
let g:WhichKeyDesc_gp = "<leader>gp Go to parent method"

let g:WhichKeyDesc_v = "<leader>v View"
nmap <leader>vw <Action>(EditorToggleUseSoftWraps)
let g:WhichKeyDesc_vw = "<leader>vw Toggle soft wraps"
nmap <leader>vz <Action>(ToggleDistractionFreeMode)
let g:WhichKeyDesc_vz = "<leader>vz Toggle zen mode"

let g:WhichKeyDesc_d = "<leader>d Debug"
nmap <leader>dv <Action>(ViewBreakpoints)
let g:WhichKeyDesc_dv = "<leader>dv View breakpoints"
nmap <leader>dt <Action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_dt = "<leader>dt Toggle line breakpoint"
nmap <leader>dc <Action>(ChooseDebugConfiguration)
let g:WhichKeyDesc_dc = "<leader>dc Choose debug configuration"
nmap <leader>dr <Action>(Debugger.RemoveAllBreakpoints)
let g:WhichKeyDesc_dr = "<leader>dr Remove all breakpoints"
nmap <leader>ds <Action>(Stop)
let g:WhichKeyDesc_ds = "<leader>ds Stop"
nmap <leader>dd <Action>(Debug)
let g:WhichKeyDesc_dd = "<leader>dd Debug"

let g:WhichKeyDesc_i = "<leader>i AI"
nmap <leader>ir <Action>(copilot.requestCompletions)
let g:WhichKeyDesc_ir = "<leader>ir Request completions"
nmap <leader>in <Action>(copilot.cycleNextInlays)
let g:WhichKeyDesc_in = "<leader>in Next completion"
nmap <leader>ia <Action>(copilot.applyInlays)
let g:WhichKeyDesc_ia = "<leader>ia Apply completion"
nmap <leader>iN <Action>(copilot.cyclePrevInlays)
let g:WhichKeyDesc_iN = "<leader>iN Previous completion"

let g:WhichKeyDesc_f = "<leader>f Find"
nmap <leader>ff <Action>(SearchEverywhere)
let g:WhichKeyDesc_ff = "<leader>ff Search everywhere"
nmap <leader>fc <Action>(GotoClass)
let g:WhichKeyDesc_fc = "<leader>fc Search classes"
nmap <leader>fr <Action>(Replace)
let g:WhichKeyDesc_fr = "<leader>fr Replace"
nmap <leader>fa <Action>(GotoAction)
let g:WhichKeyDesc_fa = "<leader>fa Search actions"
nmap <leader>fp <Action>(FindInPath)
let g:WhichKeyDesc_fp = "<leader>fp Find in path"

let g:WhichKeyDesc_m = "<leader>m Move"
nmap <leader>mf <Action>(Move)
let g:WhichKeyDesc_mf = "<leader>mf Move file"
nmap <leader>ml <Action>(MoveElementRight)
let g:WhichKeyDesc_ml = "<leader>ml Move element right"
nmap <leader>mk <Action>(MoveStatementUp)
let g:WhichKeyDesc_mk = "<leader>mk Move element up"
nmap <leader>mj <Action>(MoveStatementDown)
let g:WhichKeyDesc_mj = "<leader>mj Move element down"
nmap <leader>mh <Action>(MoveElementLeft)
let g:WhichKeyDesc_mh = "<leader>mh Move element left"

let g:WhichKeyDesc_b = "<leader>b Bookmarks"
nmap <leader>bs <Action>(ShowBookmarks)
let g:WhichKeyDesc_bs = "<leader>bs Show bookmarks"
nmap <leader>bt <Action>(ToggleBookmark)
let g:WhichKeyDesc_bt = "<leader>bt Toggle bookmark"

let g:WhichKeyDesc_c = "<leader>c Configuration"
nmap <leader>ce :e ~/.ideavimrc<CR>
let g:WhichKeyDesc_ce = "<leader>ce Edit .ideavimrc"
nmap <leader>cr <Action>(IdeaVim.ReloadVimRc.reload)
let g:WhichKeyDesc_cr = "<leader>cr Reload .ideavimrc"

let g:WhichKeyDesc_r = "<leader>r Refactor"
nmap <leader>rg <Action>(Generate)
let g:WhichKeyDesc_rg = "<leader>rg Generate"
nmap <leader>rv <Action>(IntroduceVariable)
let g:WhichKeyDesc_rv = "<leader>rv Introduce variable"
nmap <leader>re <Action>(RiderBackendAction-EncapsulateField)
let g:WhichKeyDesc_re = "<leader>re Encapsulate field"
nmap <leader>rt <Action>(Refactorings.QuickListPopupAction)
let g:WhichKeyDesc_rt = "<leader>rt Refactor this"
nmap <leader>ri <Action>(Inline)
let g:WhichKeyDesc_ri = "<leader>ri Inline"
nmap <leader>rf <Action>(IntroduceField)
let g:WhichKeyDesc_rf = "<leader>rf Introduce field"
nmap <leader>rI <Action>(ExtractInterface)
let g:WhichKeyDesc_rI = "<leader>rI Extract interface"
nmap <leader>rm <Action>(ExtractMethod)
let g:WhichKeyDesc_rm = "<leader>rm Extract method"
nmap <leader>rF <Action>(ReformatCode)
let g:WhichKeyDesc_rF = "<leader>rF Reformat Code"
nmap <leader>rs <Action>(ChangeSignature)
let g:WhichKeyDesc_rs = "<leader>rs Change signature"
nmap <leader>rr <Action>(RenameElement)
let g:WhichKeyDesc_rr = "<leader>rr Rename element"
nmap <leader>ra <Action>(ShowIntentionActions)
let g:WhichKeyDesc_ra = "<leader>ra Intention Actions"
nmap <leader>rp <Action>(IntroduceParameter)
let g:WhichKeyDesc_rp = "<leader>rp Introduce parameter"

let g:WhichKeyDesc_a = "<leader>a Auto-format"
nmap <leader>ai <Action>(OptimizeImports)
let g:WhichKeyDesc_ai = "<leader>ai Optimize imports"
nmap <leader>af <Action>(CodeCleanup)
let g:WhichKeyDesc_af = "<leader>af Cleanup"
nmap <leader>aa <Action>(SilentCodeCleanup)
let g:WhichKeyDesc_aa = "<leader>aa Cleanup silent"
nmap <leader>ad <Action>(ReformatCode)
let g:WhichKeyDesc_ad = "<leader>ad Reformat Code"

let g:WhichKeyDesc_s = "<leader>s Show"
nmap <leader>sf <Action>(RecentFiles)
let g:WhichKeyDesc_sf = "<leader>sf Recent files"
nmap <leader>su <Action>(FindUsages)
let g:WhichKeyDesc_su = "<leader>su Show usages"
nmap <leader>sd <Action>(QuickJavaDoc)
let g:WhichKeyDesc_sd = "<leader>sd Documentation"
nmap <leader>sh <Action>(CallHierarchy)
let g:WhichKeyDesc_sh = "<leader>sh Show call hierarchy"
nmap <leader>sl <Action>(RecentLocations)
let g:WhichKeyDesc_sl = "<leader>sl Recent locations"
nmap <leader>sc <Action>(RecentChangedFiles)
let g:WhichKeyDesc_sc = "<leader>sc Recent changed files"
nmap <leader>sb <Action>(ShowNavBar)
let g:WhichKeyDesc_sb = "<leader>sb Show navigation bar"
nmap <leader>sr <Action>(GotoRelated)
let g:WhichKeyDesc_sr = "<leader>sr Go to related"
nmap <leader>se <Action>(ShowErrorDescription)
let g:WhichKeyDesc_se = "<leader>se Error description"
